package controllers

import (
	"autosalon/config"
	"autosalon/models"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v4"
)

// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–∏–∑ cookie)
func getUserInfo(c *gin.Context) (bool, string, string) {
	tokenString, err := c.Cookie("token")
	if err != nil || tokenString == "" {
		return false, "", ""
	}

	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return config.JwtKey, nil
	})
	if err != nil || !token.Valid {
		return false, "", ""
	}

	claims := token.Claims.(jwt.MapClaims)
	username, _ := claims["username"].(string)
	role, _ := claims["role"].(string)

	return true, username, role
}

// üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
func ShowRegisterPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
		"Content":         "register.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –í—Ö–æ–¥
func ShowLoginPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–í—Ö–æ–¥",
		"Content":         "login.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –ì–ª–∞–≤–Ω–∞—è: —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
func ShowCarsPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)

	var approvedPosts []models.Post
	config.DB.Preload("Author").Where("approved = true").Order("created_at desc").Find(&approvedPosts)

	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏",
		"Content":         "cars.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
		"Posts":           approvedPosts,
	})
}

// üåê –ü—Ä–æ—Ñ–∏–ª—å
func ShowProfilePage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ü—Ä–æ—Ñ–∏–ª—å",
		"Content":         "profile.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func ShowCarAddPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
		"Content":         "car_add.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
func ShowCarEditPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ",
		"Content":         "car_edit.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
func ShowAdminCarsPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ê–¥–º–∏–Ω: –ê–≤—Ç–æ–º–æ–±–∏–ª–∏",
		"Content":         "admin_cars.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func ShowAdminUsersPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
		"Content":         "admin_users.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –ê–¥–º–∏–Ω: –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
func ShowAdminPostsPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
		"Content":         "admin_posts.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π)
func ShowSupportPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
		"Content":         "support.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}
