package controllers

import (
	"autosalon/config"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v4"
)

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–æ–∫–µ–Ω–∞
func getUserInfo(c *gin.Context) (bool, string, string) {
	tokenString, err := c.Cookie("token")
	if err != nil || tokenString == "" {
		return false, "", ""
	}

	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return config.JwtKey, nil
	})
	if err != nil || !token.Valid {
		return false, "", ""
	}

	claims := token.Claims.(jwt.MapClaims)
	username, _ := claims["username"].(string)
	role, _ := claims["role"].(string)

	return true, username, role
}

// üåê HTML: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func ShowRegisterPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
		"Content":         "register.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
func ShowLoginPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–í—Ö–æ–¥",
		"Content":         "login.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
func ShowCarsPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏",
		"Content":         "cars.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ShowProfilePage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ü—Ä–æ—Ñ–∏–ª—å",
		"Content":         "profile.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func ShowAdminUsersPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
		"Content":         "admin_users.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ
func ShowCarAddPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
		"Content":         "car_add.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ
func ShowCarEditPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
		"Content":         "car_edit.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}

// üåê HTML: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –≤ –∞–¥–º–∏–Ω–∫–µ
func ShowAdminCarsPage(c *gin.Context) {
	auth, username, role := getUserInfo(c)
	c.HTML(http.StatusOK, "layout.html", gin.H{
		"Title":           "–ê–¥–º–∏–Ω: –ê–≤—Ç–æ–º–æ–±–∏–ª–∏",
		"Content":         "admin_cars.html",
		"IsAuthenticated": auth,
		"Username":        username,
		"Role":            role,
	})
}
